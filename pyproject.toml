[tool.black]
line-length = 88
target-version = ['py310']
exclude = '/(\.git)/'

[tool.isort]
force_single_line = true
include_trailing_comma = true
line_length = 88
lines_after_imports = 2
multi_line_output = 3  # Vertical Hanging Indent
sections = [
    'FUTURE',
    'STDLIB',
    'THIRDPARTY',
    'FIRSTPARTY',
    'LOCALFOLDER',
]
use_parentheses = true

[tool.pylint.master]
extension-pkg-allow-list = "dependency_injector"
fail-on = "I"  # Fail on informational (e.g. useless-suppression).
jobs = 4
persistent = "no"
init-hook='import sys; sys.path.append(".")'
ignore-paths = ["alembic/versions"]

[tool.pylint.typecheck]
ignored-classes = [
    # SQLAlchemy false positives
    "sqlalchemy.orm.scoping.scoped_session",
    "sqlalchemy.orm.session.sessionmaker"
]

[tool.pylint.format]
good-names = [ "T", "d", "db", "df", "e", "i", "id", "logger", "ns", "tz" ]
ignore-long-lines='''
(?x)(
  ^\s*(\#\ )?<?https?://\S+>?$|
  ^\s*(from\s+\S+\s+)?import\s+.+$|
  ^\s*"\S+"$)
'''
# Note this is intentionally different than the black and isort settings. We want a "soft"
# limit of 100. Let black be in charge of managing line length until it gets out of hand
# an pylint needs to complain.
max-line-length = 100
single-line-if-stmt = "yes"

[tool.pylint.similarities]
ignore-imports = "yes"

[tool.pylint.messages_control]
enable = [
   "useless-suppression",
]
disable = [
    "duplicate-code", # Tends to be false positives in test code
    "fixme",  # We intentionally leave TODOs in the code.
    "missing-module-docstring",  # We don't require them.
    "too-few-public-methods", # Small classes are fine
    "ungrouped-imports",  # Leave it to isort.
    "wrong-import-order",  # Leave it to isort.
    "wrong-import-position",  # Leave it to isort.
]

[tool.bandit]
exclude_dirs = ["tests"]

[tool.ruff]
# pylint uses ruff on itself. Check it out:
# https://github.com/pylint-dev/pylint/blob/main/pyproject.toml#L141
# Started with their config then adding/removing as I see fit til I land on something I
# love.
select = [
    # @jweir: These are all the docstring rules at the time of this writing. They are
    # all enabled unless commented out. After the -- is a reason. If the reasion is a
    # bunch of question marks (??????????) that means I haven't found a reason to
    # disable them yet because my test code didn't trigger it.

    # "D100", # Missing docstring in public module. -- We don't require them.
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    # "D107", # Missing docstring in __init__ #Should we do this?
    "D200", # One-line docstring should fit on one line -- ??????????
    "D201", # No blank lines allowed before function docstring (found {num_lines})
    # "D202", # No blank lines allowed after function docstring (found {num_lines}) -- Disagree
    "D203", # 1 blank line required before class docstring -- ??????????
    "D204", # 1 blank line required after class docstring -- ??????????
    # "D205", # 1 blank line required between summary line and description -- yes, but summary detection is meh
    "D206", # Docstring should be indented with spaces, not tabs -- ??????????
    "D207", # Docstring is under-indented -- ??????????
    "D208", # Docstring is over-indented -- ??????????
    "D209", # Multi-line docstring closing quotes should be on a separate line -- ??????????
    "D210", # No whitespaces allowed surrounding docstring text
    "D211", # No blank lines allowed before class docstring -- ??????????
    # "D212", # Multi-line docstring summary should start at the first line -- Disagree
    # "D213", # Multi-line docstring summary should start at the second line -- Agree, but don't love how it picks what a multi-line summary is
    "D214", # Section is over-indented ("{name}") -- ??????????
    "D215", # Section underline is over-indented ("{name}") -- ??????????
    "D300", # Use triple double quotes """ -- ??????????
    "D301", # Use r""" if any backslashes in a docstring -- ??????????
    # "D400", # First line should end with a period -- D415 instead
    "D401", # First line of docstring should be in imperative mood: "{first_line}"
    "D402", # First line should not be the function's signature -- ??????????
    "D403", # First word of the first line should be capitalized: {} -> {} -- ??????????
    "D404", # First word of the docstring should not be "This" -- ??????????
    # "D405", # Section name should be properly capitalized ("{name}") -- TODO is correct, ya jerk
    # "D406", # Section name should end with a newline ("{name}") -- "Section" dection is lame
    # "D407", # Missing dashed underline after section ("{name}") -- Nah
    "D408", # Section underline should be in the line following the section's name ("{name}") -- ??????????
    "D409", # Section underline should match the length of its name ("{name}") -- ??????????
    "D410", # Missing blank line after section ("{name}") -- ??????????
    "D411", # Missing blank line before section ("{name}") -- ??????????
    "D412", # No blank lines allowed between a section header and its content ("{name}") -- ??????????
    "D413", # Missing blank line after last section ("{name}") -- ??????????
    "D414", # Section has no content ("{name}") -- ??????????
    "D415", # First line should end with a period, question mark, or exclamation point
    "D416", # Section name should end with a colon ("{name}") -- ??????????
    "D417", # Missing argument description in the docstring for {definition}: {name} -- ??????????
    "D418", # Function decorated with @overload shouldn't contain a docstring -- ??????????
    "D419", # Docstring is empty

    # These are all enabled willy-nilly. Keep an eye on what should be kept.
    "E",  # pycodestyle
    "EM", # flake8-errmsg
    "ARG", # flake8-unused-arguments
    "F",  # pyflakes
    "W",  # pycodestyle
    "B",  # bugbear
    "PL",  # pylint
    # "I",  # isort # TODO @jweir: not real happy right now.
    "RUF", # ruff

    # "RUF205",
    # "UP004"
    "UP",
]

ignore = [
    "EM101",  # Never enforce `EM101` (string literal in exception)
    "E501", # jweir: Never enforce `E501` (line length violations). Leave it to black
    # "B905",  # `zip()` without an explicit `strict=` parameter
    # "RUF012",  # mutable default values in class attributes
    "UP012",  # This seems... off? See cookiescanner/pipelines.py
]

fixable = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "W",  # pycodestyle
    "B",  # bugbear
    "I",  # isort
    "RUF", # ruff
]

[tool.ruff.isort] # jweir
force-single-line = true
lines-after-imports = 2 # Use a single line after each import block.
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]


# src = ['.']

detect-same-package = true
# detect-same-package = false

[tool.pytest.ini_options]
filterwarnings = [
    'ignore:Accessing jsonschema.draft4_format_checker is deprecated:DeprecationWarning',
    'ignore:jsonschema.RefResolver is deprecated as of v4.18.0:DeprecationWarning',
    'ignore:jsonschema.exceptions.RefResolutionError is deprecated:DeprecationWarning',
    "ignore:'app.json_encoder' is deprecated and will be removed in Flask 2.3:DeprecationWarning",
    "ignore:'_request_ctx_stack' is deprecated and will be removed in Flask 2.3:DeprecationWarning",
    "ignore:Setting 'json_encoder' on the app or a blueprint is deprecated:DeprecationWarning",
    "ignore:'JSONEncoder' is deprecated and will be removed in Flask 2.3:DeprecationWarning",
    "ignore:'JSONEncoder' is deprecated and will be removed in Flask 2.3:DeprecationWarning",
]
