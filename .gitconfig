[user]
    name = Jason Weir
    email = jason.g.weir@gmail.com
[color]
    branch = auto
    diff = auto
    interactive = auto
    status = auto
    ui = auto
[color "branch"]
    current = green bold
    local = green
    remote = red bold
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red
[merge]
    tool = vimdiff
    stat = true
[push]
    default = tracking
[branch]
    autosetuprebase = always
[color "sh"]
    branch = yellow
[diff]
    renames = copies
    mnemonicprefix = true
[svn]
    r
[alias]
    st = status
    ci = commit
    civ = commit --no-verify
    br = branch
    co = checkout
    df = diff
    dfw = diff --color-words
    dfs = diff --staged
    cherry-pick = cherry-pick -no-commit

    # Github Pull Request
    prurl = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); \
        repo=$(git remote -v | grep -m 1 \"(push)\" | sed -e 's/.*github.com:\\(.*\\) .*/\\1/g' | sed -e 's/\\.git//g' ); \
        url=https://github.com/$repo/pull/new/$branch; echo $url; echo ''; \
        open $url > /dev/null 2>&1; \
    }; f"
    pr = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); \
        git pull && git push && git prurl && echo '' && \
        git co master && git br -d $branch; \
    }; f"

    # Edit in vim all modified and untracked files
    vi = "!f() { git status --porcelain | sed -n 's/^\\( M\\|??\\) //p' | tr \"\\n\" ' ' | xargs bash -c 'vim \"$@\" < /dev/tty' ignoreme; }; f"

    # Commit with branch name appended
    cim = "!f() { branch=$(git rev-parse --abbrev-ref HEAD) && git commit -m \"$1 -- $branch\"; }; f"

    # create branch on remote
    cob = "!f() { git pull && git co -b $1 && branch=$(git rev-parse --abbrev-ref HEAD) && git push --set-upstream origin $branch; }; f"

    # forget this --set-upstream business.
    track = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch --set-upstream $branch ${1:-origin}/${2:-$branch}\"; $cmd; }; f"

    # unstash files
    unstash = stash apply --index

    # pull/push
    pp = "!git pull && git push"

    # 'add all' stages all new+changed+deleted files
    aa = !git ls-files -d | xargs -r git rm && git ls-files -m -o --exclude-standard | xargs -r git add
    #
    aup = "!sh -c 'git ls-files -m | grep $1 | xargs -r git add' -"
    # 'add grep' stages all new+changed that match $1
    ag = "!sh -c 'git ls-files -m -o --exclude-standard | grep $1 | xargs -r git add' -"
    #
    agp = "!sh -c 'git ls-files -m -o --exclude-standard | grep $1 | xargs -r git add -p' -"
    # 'checkout grep' checkouts any files that match $1
    cg = "!sh -c 'git ls-files -m | grep $1 | xargs -r git checkout' -"
    # 'diff grep' diffs any files that match $1
    dg = "!sh -c 'git ls-files -m | grep $1 | xargs -r git diff' -"
    # 'patch grep' diff --cached any files that match $1
    pg = "!sh -c 'git ls-files -m | grep $1 | xargs -r git diff --cached' -"
    # 'remove grep' remove any files that match $1
    rmg = "!sh -c 'git ls-files -d | grep $1 | xargs -r git rm' -"
    # 'reset grep' reset any files that match $1
    rsg = "!sh -c 'git ls-files -c | grep $1 | xargs -r git reset' -"
    # nice log output
    lg = log --graph --pretty=oneline --abbrev-commit --decorate
    # rerun svn show-ignore -> exclude
    si = !git svn show-ignore > .git/info/exclude
    # start git-sh
    sh = !git-sh
    # Grep like ack
    ack = grep --break --heading --line-number --color=always -I
    ick = grep --break --heading --line-number --color=always -I --ignore-case
[core]
    excludesfile = ~/.gitignore_global
    quotepath = false
    whitespace = trailing-space,space-before-tab
[init]
    templatedir = ~/.gittemplate
[grep]
    lineNumber = true
[branch]
    autosetupmerge = true
[hooks]
    tagmatchpattern = jweir|todo
[flake8]
    strict = true
[pull]
    rebase = true
[commit]
    gpgsign = true
