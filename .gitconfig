[user]
    name = Jason Weir
    email = jason@rata.com
	signingkey = C889DF5C
[color]
    branch = auto
    diff = auto
    interactive = auto
    status = auto
    ui = auto
    grep = auto
[color "branch"]
    current = green bold
    local = green
    remote = red bold
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red
[color "grep"]
    filename = yellow bold
    linenumber = green
[color "sh"]
    branch = yellow
[merge]
    tool = vimdiff
    stat = true
[push]
    default = current # Also: nothing, current, upstream, simple, matching
[branch]
    autosetuprebase = always
[diff]
    renames = copies
    mnemonicprefix = true
[svn]
    r
[alias]
    ad = add
    st = status
    ci = commit
    civ = commit --no-verify
    br = branch
    co = checkout
    df = diff
    dfw = diff --color-words -b
    dfs = diff --staged
    cherry-pick = cherry-pick --no-commit
    cp = cherry-pick --no-commit
    ammend = commit --amend -C HEAD
    fp = push --force-with-lease
    rm = rm --ignore-unmatch

    # Used by other aliases
    remoterepo = "!f() { \
        repo=$(git remote -v | grep -m 1 \"(push)\" | sed -e 's/.*github.com:\\(.*\\) .*/\\1/g' | sed -e 's/\\.git//g' ); \
        echo $repo; \
    }; f"
    # Used by other aliases
    reponame = "!f() { \
        name=$(basename $(git remote get-url origin) .git); \
        echo $name; \
    }; f"
    # Open Repo in github
    hub = "!f() { repo=$(git remoterepo); \
        url=https://github.com/$repo; echo $url; echo ''; \
        open $url > /dev/null 2>&1; \
    }; f"
    # Github Pull Request
    prurl = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); \
        repo=$(git remoterepo); \
        url=https://github.com/$repo/pull/new/$branch; echo $url; echo ''; \
        open $url > /dev/null 2>&1; \
    }; f"
    pr = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); \
        git pull && git push && git prurl && echo '' && \
        git co master && git br -d $branch; \
    }; f"

    # Open CircleCI: opens url https://circleci.com/gh/<ORG>/<REPO>
    cci = "!f() { repo=$(git remoterepo); \
        url=https://circleci.com/gh/$repo; echo $url; echo ''; \
        open $url > /dev/null 2>&1; \
    }; f"

    # Open CodeFresh: opens url https://g.codefresh.io/builds2?filter=repository:<REPO>
    cf = "!f() { repo=$(git reponame); \
        url=https://g.codefresh.io/builds2?filter=repository:$repo; echo $url; echo ''; \
        open $url > /dev/null 2>&1; \
    }; f"

    # Replace a file with the version at a specific hash
    overwrite = "!f() { \
        commit=0dd165a; \
        for file in $@; do \
            git show $commit:$file > $file; \
            git add $file; \
        done; \
    }; f"
    ow=overwrite

    # Edit in vim all modified and untracked files
    vi = "!f() { git status --porcelain | sed -n 's/^\\( M\\|??\\) //p' | tr \"\\n\" ' ' | xargs bash -c 'vim \"$@\" < /dev/tty' ignoreme; }; f"

    # Commit with branch name appended
    cim = "!f() { branch=$(git rev-parse --abbrev-ref HEAD) && git commit -m \"$1 -- $branch\"; }; f"

    # create branch on remote
    cob = "!f() { git pull && git co -b $1 && branch=$(git rev-parse --abbrev-ref HEAD) && git push --set-upstream origin $branch; }; f"

    # forget this --set-upstream business.
    track = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch --set-upstream $branch ${1:-origin}/${2:-$branch}\"; $cmd; }; f"

    # unstash files
    unstash = stash apply --index

    # pull/push
    pp = "!git pull && git push"

    # 'add all' stages all new+changed+deleted files
    aa = !git ls-files -d | xargs -r git rm && git ls-files -m -o --exclude-standard | xargs -r git add
    #
    aup = "!sh -c 'git ls-files -m | grep $1 | xargs -r git add' -"
    # 'add grep' stages all new+changed that match $1
    ag = "!sh -c 'git ls-files -m -o --exclude-standard | grep $1 | xargs -r git add' -"
    #
    agp = "!sh -c 'git ls-files -m -o --exclude-standard | grep $1 | xargs -r git add -p' -"
    # 'checkout grep' checkouts any files that match $1
    cg = "!sh -c 'git ls-files -m | grep $1 | xargs -r git checkout' -"
    # 'diff grep' diffs any files that match $1
    dg = "!sh -c 'git ls-files -m | grep $1 | xargs -r git diff' -"
    # 'patch grep' diff --cached any files that match $1
    pg = "!sh -c 'git ls-files -m | grep $1 | xargs -r git diff --cached' -"
    # 'remove grep' remove any files that match $1
    rmg = "!sh -c 'git ls-files -d | grep $1 | xargs -r git rm' -"
    # 'reset grep' reset any files that match $1
    rsg = "!sh -c 'git ls-files -c | grep $1 | xargs -r git reset' -"
    # nice log output
    lg = log --graph --pretty=oneline --abbrev-commit --decorate
    # rerun svn show-ignore -> exclude
    si = !git svn show-ignore > .git/info/exclude
    # start git-sh
    sh = !git-sh
    # Grep like ack
    ack = grep --break --heading --line-number --color=always -I
    ick = grep --break --heading --line-number --color=always -I --ignore-case
    # Pretend I haven't changed things
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
[core]
    excludesfile = ~/.gitignore_global
    quotepath = false
    whitespace = trailing-space,space-before-tab
	pager = diff-so-fancy | less --tabs=4 -RFX
[init]
    templatedir = ~/.gittemplate
[grep]
    lineNumber = true
[branch]
    autosetupmerge = true
[hooks]
    tagmatchpattern = jweir|todo
[flake8]
    strict = true
[pull]
    rebase = false
[commit]
    gpgsign = true
[gpg]
    program = /usr/local/bin/gpg
[diff "sopsdiffer"]
    textconv = sops -d
[url "ssh://git@github.com"]
    insteadOf = https://github.com
[credential]
    helper = osxkeychain
[help]
    autocorrect = 1
# TODO: test out p4merge
# https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_external_merge_tools
# [merge]
#   tool = extMerge
# [mergetool "extMerge"]
#   cmd = extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
#   trustExitCode = false
# [diff]
#   external = extDiff
[mergetool]
    keepBackup = false
[rerere]
    enabled = true
[secrets]
    providers = git secrets --aws-provider
    patterns = (A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}
    patterns = (\"|')?(AWS|aws|Aws)?_?(SECRET|secret|Secret)?_?(ACCESS|access|Access)?_?(KEY|key|Key)(\"|')?\\s*(:|=>|=)\\s*(\"|')?[A-Za-z0-9/\\+=]{40}(\"|')?
    patterns = (\"|')?(AWS|aws|Aws)?_?(ACCOUNT|account|Account)_?(ID|id|Id)?(\"|')?\\s*(:|=>|=)\\s*(\"|')?[0-9]{4}\\-?[0-9]{4}\\-?[0-9]{4}(\"|')?
    allowed = AKIAIOSFODNN7EXAMPLE
    allowed = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    patterns = private_key
    patterns = private_key_id
[interactive]
	diffFilter = diff-so-fancy --patch
	textconv = sops -d
