#!/usr/bin/env python3
"""
Generate prefixed, checksumed tokens.

Modelled after github's description of their tokens.
https://github.blog/2021-04-05-behind-githubs-new-authentication-token-formats/
"""
import argparse
import string
import secrets
import zlib
import subprocess


def gen_token(args: argparse.Namespace) -> str:
    """ Generate a token. """
    prefix = args.prefix or "TKN"

    alphabet = string.ascii_letters + string.digits
    token = "".join(secrets.choice(alphabet) for i in range(args.length))

    crc = zlib.crc32(token.encode())
    checksum = format(crc, "x").zfill(6)[:6]

    parts = [prefix, token, checksum]
    return "_".join(parts)


def _write_to_clipboard(output):
    process = subprocess.Popen(
        "pbcopy", env={"LANG": "en_US.UTF-8"}, stdin=subprocess.PIPE
    )
    process.communicate(output.encode("utf-8"))
    print("(copied to clipboard)")


def _parse_args():
    """ Define and parse arguments for CLI command. """
    parser = argparse.ArgumentParser(description="Generate a token")
    parser.add_argument(
        "--prefix",
        "-p",
        metavar="prefix",
        type=str,
        help="A prefix for your token",
    )
    parser.add_argument(
        "--length",
        "-l",
        metavar="length",
        type=int,
        default=32,
        help="Length of the token",
    )
    return parser.parse_args()


def main():
    """ Generate, print, and copy a token to your (mac) clipboard. """
    parsed_args = _parse_args()
    api_token = gen_token(parsed_args)
    print(api_token)
    _write_to_clipboard(api_token)


if __name__ == "__main__":
    main()
